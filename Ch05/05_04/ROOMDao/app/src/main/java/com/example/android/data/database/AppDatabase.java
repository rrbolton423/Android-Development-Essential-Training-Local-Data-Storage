package com.example.android.data.database;

import android.arch.persistence.room.Database;
import android.arch.persistence.room.Room;
import android.arch.persistence.room.RoomDatabase;
import android.content.Context;

import com.example.android.data.model.DataItem;

// Room database component is an abstract class which is marked with
// Database annotation. Room database component definition includes list
// of entities and DAOs.

@Database(entities = {DataItem.class}, version = 1)
public abstract class AppDatabase extends RoomDatabase {

    private static AppDatabase instance;

    // For each DataAccessObject, create an abstract method.
    // It will be public and abstract, it will return an instance
    // of that DAO interface. It is an abstract method, the implementation
    // will be generated by Room.
    // To make sure that's working, select Build, MakeProject, then
    // check the messages window for any errors
    // Room will make the implementation based on the annotations
    // Leave Room to implement the dataItemDao method

    // Create an abstract method that returns an instance of the
    // DAO interface.
    public abstract DataItemDao dataItemDao();

    public static AppDatabase getInstance(Context context) {
        if (instance == null) {
            instance = Room.databaseBuilder(context.getApplicationContext(),
                    AppDatabase.class, "app-database")
                    .allowMainThreadQueries()
                    .build();
        }
        return instance;
    }

    public static void destroyInstance() {
        instance = null;
    }
}
