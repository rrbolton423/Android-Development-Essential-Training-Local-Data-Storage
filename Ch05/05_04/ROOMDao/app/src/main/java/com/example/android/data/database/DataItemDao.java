package com.example.android.data.database;

import android.arch.persistence.room.Dao;
import android.arch.persistence.room.Insert;
import android.arch.persistence.room.Query;

import com.example.android.data.model.DataItem;

import java.util.List;

/**
 * Created by romellbolton on 1/14/18.
 */

// DAO is an interface which is marked with DAO annotation and it contains
// method definitions related to accessing database.
// You need to mark methods with annotations such as Insert, Delete, Update,
// and Query, based on the type of database operation they perform.

// Once you've created a Database structure with Room, you're ready to
// work with data; inserting, querying, and deleting it.
// For each table, you've created an entity class already.
// Now for that table I'll also create a DataAccessObject class,
// or DAO. This is where you define your queries.
// DAO won't be a class, instead it'll be an interface.
// The implementation of the interface will be generated by room.

// In order to mark this as a DAO class, just add the DAO annotation
// above the interface declaration. Then go to your Room Database class,
// For each DAO, create an abstract method.
// It will be public and abstract, it will return an instance
// of that DAO interface. It is an abstract method, the implementation
// will be generated by room.
// To make sure that's working, select Build, MakeProject, then
// check the messages window for any errors
@Dao
public interface DataItemDao {

    // This DAO class is where you define your queries.
    // We will define an INSERT operation.
    // Start with the @Insert annotation, the the method name
    // Method wil receive a List of DataItem objects
    // This is all you need to do. The insert annotation is
    // interpreted by the Room library, and all the SQL code is
    // generated for you in the background.
    @Insert
    void insertAll(List<DataItem> items);

    // Now this is how you would pass in a Java list object.
    // If you wanted to insert a single item, or a comma delimited list of items,
    // you could create an overload of this method.
    // For this version instead f a list of data item objects, I'll pass in an
    // indeterminate number of data item objects. We define that with the three dots
    // or ellipses.
    @Insert
    void insertAll(DataItem... items);

    // So now we have 2 different versions of the insertAll() method. One that receives
    // a java list and one that receives one or more individual item objects, or a simple array.

    // I'm also going to define one simple query, you do this with the @Query annotation
    // and then within the parenthesis, you pass in the SQL statement that you
    // want to execute. I'll pass in a SQL statement that asks for the count of all rows from
    // Data item table.

    //@Query("SELECT COUNT(*) from dataitem")
    // Then define the method like this
    // It will return an integer called countItems()
    @Query("SELECT COUNT(*) from dataitem")
    int countItems();
    // That's all you need to do. In this example, you are responsible for creating the
    // SQL statement, but the execution and the return of the data is handled by Room.

    // Now I'll go back to my MainActivity class, and I'll add code to insert this data.


}
